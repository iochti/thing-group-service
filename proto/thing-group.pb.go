// Code generated by protoc-gen-go.
// source: thing-group-service/proto/thing-group.proto
// DO NOT EDIT!

/*
Package iochti_thingGroup is a generated protocol buffer package.

It is generated from these files:
	thing-group-service/proto/thing-group.proto

It has these top-level messages:
	ThingGroup
	GroupIDRequest
*/
package iochti_thingGroup

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import iochti_thing "thing-service/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ThingGroup struct {
	ID          int32  `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name        string `protobuf:"bytes,2,opt,name=Name" json:"Name,omitempty"`
	Description string `protobuf:"bytes,3,opt,name=Description" json:"Description,omitempty"`
}

func (m *ThingGroup) Reset()                    { *m = ThingGroup{} }
func (m *ThingGroup) String() string            { return proto.CompactTextString(m) }
func (*ThingGroup) ProtoMessage()               {}
func (*ThingGroup) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ThingGroup) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *ThingGroup) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ThingGroup) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

type GroupIDRequest struct {
	ID int32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *GroupIDRequest) Reset()                    { *m = GroupIDRequest{} }
func (m *GroupIDRequest) String() string            { return proto.CompactTextString(m) }
func (*GroupIDRequest) ProtoMessage()               {}
func (*GroupIDRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GroupIDRequest) GetID() int32 {
	if m != nil {
		return m.ID
	}
	return 0
}

func init() {
	proto.RegisterType((*ThingGroup)(nil), "iochti.thingGroup.ThingGroup")
	proto.RegisterType((*GroupIDRequest)(nil), "iochti.thingGroup.GroupIDRequest")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ThingGroupSvc service

type ThingGroupSvcClient interface {
	GetGroup(ctx context.Context, in *GroupIDRequest, opts ...grpc.CallOption) (*ThingGroup, error)
	CreateGroup(ctx context.Context, in *ThingGroup, opts ...grpc.CallOption) (*ThingGroup, error)
	DeleteGroup(ctx context.Context, in *GroupIDRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
	GetGroupsThings(ctx context.Context, in *GroupIDRequest, opts ...grpc.CallOption) (ThingGroupSvc_GetGroupsThingsClient, error)
}

type thingGroupSvcClient struct {
	cc *grpc.ClientConn
}

func NewThingGroupSvcClient(cc *grpc.ClientConn) ThingGroupSvcClient {
	return &thingGroupSvcClient{cc}
}

func (c *thingGroupSvcClient) GetGroup(ctx context.Context, in *GroupIDRequest, opts ...grpc.CallOption) (*ThingGroup, error) {
	out := new(ThingGroup)
	err := grpc.Invoke(ctx, "/iochti.thingGroup.ThingGroupSvc/GetGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingGroupSvcClient) CreateGroup(ctx context.Context, in *ThingGroup, opts ...grpc.CallOption) (*ThingGroup, error) {
	out := new(ThingGroup)
	err := grpc.Invoke(ctx, "/iochti.thingGroup.ThingGroupSvc/CreateGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingGroupSvcClient) DeleteGroup(ctx context.Context, in *GroupIDRequest, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/iochti.thingGroup.ThingGroupSvc/DeleteGroup", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *thingGroupSvcClient) GetGroupsThings(ctx context.Context, in *GroupIDRequest, opts ...grpc.CallOption) (ThingGroupSvc_GetGroupsThingsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_ThingGroupSvc_serviceDesc.Streams[0], c.cc, "/iochti.thingGroup.ThingGroupSvc/GetGroupsThings", opts...)
	if err != nil {
		return nil, err
	}
	x := &thingGroupSvcGetGroupsThingsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ThingGroupSvc_GetGroupsThingsClient interface {
	Recv() (*iochti_thing.Thing, error)
	grpc.ClientStream
}

type thingGroupSvcGetGroupsThingsClient struct {
	grpc.ClientStream
}

func (x *thingGroupSvcGetGroupsThingsClient) Recv() (*iochti_thing.Thing, error) {
	m := new(iochti_thing.Thing)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ThingGroupSvc service

type ThingGroupSvcServer interface {
	GetGroup(context.Context, *GroupIDRequest) (*ThingGroup, error)
	CreateGroup(context.Context, *ThingGroup) (*ThingGroup, error)
	DeleteGroup(context.Context, *GroupIDRequest) (*google_protobuf.Empty, error)
	GetGroupsThings(*GroupIDRequest, ThingGroupSvc_GetGroupsThingsServer) error
}

func RegisterThingGroupSvcServer(s *grpc.Server, srv ThingGroupSvcServer) {
	s.RegisterService(&_ThingGroupSvc_serviceDesc, srv)
}

func _ThingGroupSvc_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingGroupSvcServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iochti.thingGroup.ThingGroupSvc/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingGroupSvcServer).GetGroup(ctx, req.(*GroupIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingGroupSvc_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ThingGroup)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingGroupSvcServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iochti.thingGroup.ThingGroupSvc/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingGroupSvcServer).CreateGroup(ctx, req.(*ThingGroup))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingGroupSvc_DeleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThingGroupSvcServer).DeleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iochti.thingGroup.ThingGroupSvc/DeleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThingGroupSvcServer).DeleteGroup(ctx, req.(*GroupIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ThingGroupSvc_GetGroupsThings_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GroupIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ThingGroupSvcServer).GetGroupsThings(m, &thingGroupSvcGetGroupsThingsServer{stream})
}

type ThingGroupSvc_GetGroupsThingsServer interface {
	Send(*iochti_thing.Thing) error
	grpc.ServerStream
}

type thingGroupSvcGetGroupsThingsServer struct {
	grpc.ServerStream
}

func (x *thingGroupSvcGetGroupsThingsServer) Send(m *iochti_thing.Thing) error {
	return x.ServerStream.SendMsg(m)
}

var _ThingGroupSvc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iochti.thingGroup.ThingGroupSvc",
	HandlerType: (*ThingGroupSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetGroup",
			Handler:    _ThingGroupSvc_GetGroup_Handler,
		},
		{
			MethodName: "CreateGroup",
			Handler:    _ThingGroupSvc_CreateGroup_Handler,
		},
		{
			MethodName: "DeleteGroup",
			Handler:    _ThingGroupSvc_DeleteGroup_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetGroupsThings",
			Handler:       _ThingGroupSvc_GetGroupsThings_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "thing-group-service/proto/thing-group.proto",
}

func init() { proto.RegisterFile("thing-group-service/proto/thing-group.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 277 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xef, 0x4a, 0xc3, 0x30,
	0x14, 0xc5, 0xd7, 0xfa, 0x07, 0xbd, 0xc3, 0x89, 0x11, 0xa4, 0x54, 0xc4, 0xda, 0x4f, 0x03, 0x59,
	0x2a, 0xfa, 0x08, 0x56, 0x46, 0x05, 0xf7, 0xa1, 0xfa, 0x02, 0x5b, 0xb9, 0x76, 0x81, 0x6d, 0x89,
	0x49, 0x3a, 0xf0, 0x11, 0x7d, 0x2b, 0xe9, 0x8d, 0x75, 0x9b, 0x0e, 0xed, 0xb7, 0x70, 0xcf, 0xc9,
	0xef, 0x9e, 0xcb, 0x81, 0x6b, 0x3b, 0x15, 0x8b, 0x72, 0x50, 0x6a, 0x59, 0xa9, 0x81, 0x41, 0xbd,
	0x14, 0x05, 0x26, 0x4a, 0x4b, 0x2b, 0x93, 0x35, 0x85, 0xd3, 0x84, 0x9d, 0x08, 0x59, 0x4c, 0xad,
	0xe0, 0xa4, 0x0c, 0x6b, 0x21, 0x3c, 0x2f, 0xa5, 0x2c, 0x67, 0x5f, 0x5f, 0x26, 0xd5, 0x6b, 0x82,
	0x73, 0x65, 0xdf, 0x9d, 0x3f, 0xbc, 0x74, 0x88, 0x2d, 0x58, 0x67, 0x88, 0x73, 0x80, 0x97, 0x6f,
	0x16, 0xeb, 0x81, 0x9f, 0xa5, 0x81, 0x17, 0x79, 0xfd, 0xbd, 0xdc, 0xcf, 0x52, 0xc6, 0x60, 0x77,
	0x34, 0x9e, 0x63, 0xe0, 0x47, 0x5e, 0xff, 0x30, 0xa7, 0x37, 0x8b, 0xa0, 0x9b, 0xa2, 0x29, 0xb4,
	0x50, 0x56, 0xc8, 0x45, 0xb0, 0x43, 0xd2, 0xfa, 0x28, 0x8e, 0xa0, 0x47, 0xb8, 0x2c, 0xcd, 0xf1,
	0xad, 0x42, 0x63, 0x7f, 0x72, 0x6f, 0x3f, 0x7c, 0x38, 0x5a, 0xad, 0x7d, 0x5e, 0x16, 0x6c, 0x04,
	0x07, 0x43, 0xb4, 0x2e, 0xc5, 0x15, 0xff, 0x75, 0x25, 0xdf, 0x04, 0x86, 0x17, 0x5b, 0x2c, 0x2b,
	0x60, 0xdc, 0x61, 0x4f, 0xd0, 0xbd, 0xd7, 0x38, 0xb6, 0xe8, 0x90, 0x7f, 0xfb, 0xff, 0xc7, 0x3d,
	0xd6, 0x47, 0xcf, 0xb0, 0xc1, 0xb5, 0x48, 0x78, 0xc6, 0x5d, 0x2f, 0xbc, 0xe9, 0x85, 0x3f, 0xd4,
	0xbd, 0x50, 0xb4, 0xe3, 0xe6, 0x54, 0x43, 0x4b, 0x4c, 0x1b, 0xde, 0xe9, 0x86, 0xc5, 0xa5, 0x8b,
	0x3b, 0x37, 0xde, 0x64, 0x9f, 0x16, 0xdc, 0x7d, 0x06, 0x00, 0x00, 0xff, 0xff, 0x28, 0x88, 0xb0,
	0x91, 0x48, 0x02, 0x00, 0x00,
}
